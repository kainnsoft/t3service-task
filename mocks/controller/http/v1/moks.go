// Code generated by MockGen. DO NOT EDIT.
// Source: .\internal\controller\http\v1\interfaces.go

// Package ctrl_mocks is a generated GoMock package.
package ctrl_mocks

import (
	context "context"
	reflect "reflect"
	entity "team3-task/internal/entity"

	gomock "github.com/golang/mock/gomock"
)

// MockTaskHandlerInterface is a mock of TaskHandlerInterface interface.
type MockTaskHandlerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTaskHandlerInterfaceMockRecorder
}

// MockTaskHandlerInterfaceMockRecorder is the mock recorder for MockTaskHandlerInterface.
type MockTaskHandlerInterfaceMockRecorder struct {
	mock *MockTaskHandlerInterface
}

// NewMockTaskHandlerInterface creates a new mock instance.
func NewMockTaskHandlerInterface(ctrl *gomock.Controller) *MockTaskHandlerInterface {
	mock := &MockTaskHandlerInterface{ctrl: ctrl}
	mock.recorder = &MockTaskHandlerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskHandlerInterface) EXPECT() *MockTaskHandlerInterfaceMockRecorder {
	return m.recorder
}

// CreateTaskHandle mocks base method.
func (m *MockTaskHandlerInterface) CreateTaskHandle(arg0 context.Context, arg1 []byte, arg2 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTaskHandle", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTaskHandle indicates an expected call of CreateTaskHandle.
func (mr *MockTaskHandlerInterfaceMockRecorder) CreateTaskHandle(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTaskHandle", reflect.TypeOf((*MockTaskHandlerInterface)(nil).CreateTaskHandle), arg0, arg1, arg2)
}

// DeleteTaskHandle mocks base method.
func (m *MockTaskHandlerInterface) DeleteTaskHandle(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTaskHandle", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTaskHandle indicates an expected call of DeleteTaskHandle.
func (mr *MockTaskHandlerInterfaceMockRecorder) DeleteTaskHandle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTaskHandle", reflect.TypeOf((*MockTaskHandlerInterface)(nil).DeleteTaskHandle), arg0, arg1)
}

// GetListTaskHandle mocks base method.
func (m *MockTaskHandlerInterface) GetListTaskHandle(arg0 context.Context) ([]entity.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListTaskHandle", arg0)
	ret0, _ := ret[0].([]entity.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListTaskHandle indicates an expected call of GetListTaskHandle.
func (mr *MockTaskHandlerInterfaceMockRecorder) GetListTaskHandle(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListTaskHandle", reflect.TypeOf((*MockTaskHandlerInterface)(nil).GetListTaskHandle), arg0)
}

// GetTaskHandle mocks base method.
func (m *MockTaskHandlerInterface) GetTaskHandle(arg0 context.Context, arg1 int) (entity.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskHandle", arg0, arg1)
	ret0, _ := ret[0].(entity.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskHandle indicates an expected call of GetTaskHandle.
func (mr *MockTaskHandlerInterfaceMockRecorder) GetTaskHandle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskHandle", reflect.TypeOf((*MockTaskHandlerInterface)(nil).GetTaskHandle), arg0, arg1)
}

// UpdateTaskHandle mocks base method.
func (m *MockTaskHandlerInterface) UpdateTaskHandle(arg0 context.Context, arg1 *entity.Task) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTaskHandle", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTaskHandle indicates an expected call of UpdateTaskHandle.
func (mr *MockTaskHandlerInterfaceMockRecorder) UpdateTaskHandle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTaskHandle", reflect.TypeOf((*MockTaskHandlerInterface)(nil).UpdateTaskHandle), arg0, arg1)
}
