// Code generated by MockGen. DO NOT EDIT.
// Source: .\internal\usecase\interfaces.go

// Package repo_mocks is a generated GoMock package.
package repo_mocks

import (
	context "context"
	reflect "reflect"
	entity "team3-task/internal/entity"

	gomock "github.com/golang/mock/gomock"
	pgx "github.com/jackc/pgx/v4"
)

// MockTaskDBRepoInterface is a mock of TaskDBRepoInterface interface.
type MockTaskDBRepoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTaskDBRepoInterfaceMockRecorder
}

// MockTaskDBRepoInterfaceMockRecorder is the mock recorder for MockTaskDBRepoInterface.
type MockTaskDBRepoInterfaceMockRecorder struct {
	mock *MockTaskDBRepoInterface
}

// NewMockTaskDBRepoInterface creates a new mock instance.
func NewMockTaskDBRepoInterface(ctrl *gomock.Controller) *MockTaskDBRepoInterface {
	mock := &MockTaskDBRepoInterface{ctrl: ctrl}
	mock.recorder = &MockTaskDBRepoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskDBRepoInterface) EXPECT() *MockTaskDBRepoInterfaceMockRecorder {
	return m.recorder
}

// CreateDBTask mocks base method.
func (m *MockTaskDBRepoInterface) CreateDBTask(arg0 context.Context, arg1 *pgx.Tx, arg2 *entity.Task) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDBTask", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDBTask indicates an expected call of CreateDBTask.
func (mr *MockTaskDBRepoInterfaceMockRecorder) CreateDBTask(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDBTask", reflect.TypeOf((*MockTaskDBRepoInterface)(nil).CreateDBTask), arg0, arg1, arg2)
}

// DeleteDBTask mocks base method.
func (m *MockTaskDBRepoInterface) DeleteDBTask(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDBTask", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDBTask indicates an expected call of DeleteDBTask.
func (mr *MockTaskDBRepoInterfaceMockRecorder) DeleteDBTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDBTask", reflect.TypeOf((*MockTaskDBRepoInterface)(nil).DeleteDBTask), arg0, arg1)
}

// GetDBTask mocks base method.
func (m *MockTaskDBRepoInterface) GetDBTask(arg0 context.Context, arg1 int) (entity.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDBTask", arg0, arg1)
	ret0, _ := ret[0].(entity.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDBTask indicates an expected call of GetDBTask.
func (mr *MockTaskDBRepoInterfaceMockRecorder) GetDBTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDBTask", reflect.TypeOf((*MockTaskDBRepoInterface)(nil).GetDBTask), arg0, arg1)
}

// GetListDBTask mocks base method.
func (m *MockTaskDBRepoInterface) GetListDBTask(arg0 context.Context) ([]entity.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListDBTask", arg0)
	ret0, _ := ret[0].([]entity.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListDBTask indicates an expected call of GetListDBTask.
func (mr *MockTaskDBRepoInterfaceMockRecorder) GetListDBTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListDBTask", reflect.TypeOf((*MockTaskDBRepoInterface)(nil).GetListDBTask), arg0)
}

// UpdateDBTask mocks base method.
func (m *MockTaskDBRepoInterface) UpdateDBTask(arg0 context.Context, arg1 *entity.Task) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDBTask", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDBTask indicates an expected call of UpdateDBTask.
func (mr *MockTaskDBRepoInterfaceMockRecorder) UpdateDBTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDBTask", reflect.TypeOf((*MockTaskDBRepoInterface)(nil).UpdateDBTask), arg0, arg1)
}

// MockTxDBRepoInterface is a mock of TxDBRepoInterface interface.
type MockTxDBRepoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTxDBRepoInterfaceMockRecorder
}

// MockTxDBRepoInterfaceMockRecorder is the mock recorder for MockTxDBRepoInterface.
type MockTxDBRepoInterfaceMockRecorder struct {
	mock *MockTxDBRepoInterface
}

// NewMockTxDBRepoInterface creates a new mock instance.
func NewMockTxDBRepoInterface(ctrl *gomock.Controller) *MockTxDBRepoInterface {
	mock := &MockTxDBRepoInterface{ctrl: ctrl}
	mock.recorder = &MockTxDBRepoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxDBRepoInterface) EXPECT() *MockTxDBRepoInterfaceMockRecorder {
	return m.recorder
}

// BeginDBTransaction mocks base method.
func (m *MockTxDBRepoInterface) BeginDBTransaction(arg0 context.Context) (*pgx.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginDBTransaction", arg0)
	ret0, _ := ret[0].(*pgx.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginDBTransaction indicates an expected call of BeginDBTransaction.
func (mr *MockTxDBRepoInterfaceMockRecorder) BeginDBTransaction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginDBTransaction", reflect.TypeOf((*MockTxDBRepoInterface)(nil).BeginDBTransaction), arg0)
}

// CommitDBTransaction mocks base method.
func (m *MockTxDBRepoInterface) CommitDBTransaction(arg0 context.Context, arg1 *pgx.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitDBTransaction", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitDBTransaction indicates an expected call of CommitDBTransaction.
func (mr *MockTxDBRepoInterfaceMockRecorder) CommitDBTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitDBTransaction", reflect.TypeOf((*MockTxDBRepoInterface)(nil).CommitDBTransaction), arg0, arg1)
}

// RollbackDBTransaction mocks base method.
func (m *MockTxDBRepoInterface) RollbackDBTransaction(arg0 context.Context, arg1 *pgx.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackDBTransaction", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackDBTransaction indicates an expected call of RollbackDBTransaction.
func (mr *MockTxDBRepoInterfaceMockRecorder) RollbackDBTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackDBTransaction", reflect.TypeOf((*MockTxDBRepoInterface)(nil).RollbackDBTransaction), arg0, arg1)
}

// MockTaskApproversDBRepoInterface is a mock of TaskApproversDBRepoInterface interface.
type MockTaskApproversDBRepoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTaskApproversDBRepoInterfaceMockRecorder
}

// MockTaskApproversDBRepoInterfaceMockRecorder is the mock recorder for MockTaskApproversDBRepoInterface.
type MockTaskApproversDBRepoInterfaceMockRecorder struct {
	mock *MockTaskApproversDBRepoInterface
}

// NewMockTaskApproversDBRepoInterface creates a new mock instance.
func NewMockTaskApproversDBRepoInterface(ctrl *gomock.Controller) *MockTaskApproversDBRepoInterface {
	mock := &MockTaskApproversDBRepoInterface{ctrl: ctrl}
	mock.recorder = &MockTaskApproversDBRepoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskApproversDBRepoInterface) EXPECT() *MockTaskApproversDBRepoInterfaceMockRecorder {
	return m.recorder
}

// GetTaskApproversByTaskID mocks base method.
func (m *MockTaskApproversDBRepoInterface) GetTaskApproversByTaskID(arg0 context.Context, arg1 int) ([]entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskApproversByTaskID", arg0, arg1)
	ret0, _ := ret[0].([]entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskApproversByTaskID indicates an expected call of GetTaskApproversByTaskID.
func (mr *MockTaskApproversDBRepoInterfaceMockRecorder) GetTaskApproversByTaskID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskApproversByTaskID", reflect.TypeOf((*MockTaskApproversDBRepoInterface)(nil).GetTaskApproversByTaskID), arg0, arg1)
}

// GetTaskApproversIDByTaskID mocks base method.
func (m *MockTaskApproversDBRepoInterface) GetTaskApproversIDByTaskID(arg0 context.Context, arg1 int) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskApproversIDByTaskID", arg0, arg1)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskApproversIDByTaskID indicates an expected call of GetTaskApproversIDByTaskID.
func (mr *MockTaskApproversDBRepoInterfaceMockRecorder) GetTaskApproversIDByTaskID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskApproversIDByTaskID", reflect.TypeOf((*MockTaskApproversDBRepoInterface)(nil).GetTaskApproversIDByTaskID), arg0, arg1)
}

// InsertDBTaskApprovers mocks base method.
func (m *MockTaskApproversDBRepoInterface) InsertDBTaskApprovers(arg0 context.Context, arg1 *pgx.Tx, arg2 int, arg3 []entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertDBTaskApprovers", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertDBTaskApprovers indicates an expected call of InsertDBTaskApprovers.
func (mr *MockTaskApproversDBRepoInterfaceMockRecorder) InsertDBTaskApprovers(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertDBTaskApprovers", reflect.TypeOf((*MockTaskApproversDBRepoInterface)(nil).InsertDBTaskApprovers), arg0, arg1, arg2, arg3)
}

// MockTaskEventsDBRepoInterface is a mock of TaskEventsDBRepoInterface interface.
type MockTaskEventsDBRepoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTaskEventsDBRepoInterfaceMockRecorder
}

// MockTaskEventsDBRepoInterfaceMockRecorder is the mock recorder for MockTaskEventsDBRepoInterface.
type MockTaskEventsDBRepoInterfaceMockRecorder struct {
	mock *MockTaskEventsDBRepoInterface
}

// NewMockTaskEventsDBRepoInterface creates a new mock instance.
func NewMockTaskEventsDBRepoInterface(ctrl *gomock.Controller) *MockTaskEventsDBRepoInterface {
	mock := &MockTaskEventsDBRepoInterface{ctrl: ctrl}
	mock.recorder = &MockTaskEventsDBRepoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskEventsDBRepoInterface) EXPECT() *MockTaskEventsDBRepoInterfaceMockRecorder {
	return m.recorder
}

// GetApproversIDMapMatchingTheListByTaskID mocks base method.
func (m *MockTaskEventsDBRepoInterface) GetApproversIDMapMatchingTheListByTaskID(arg0 context.Context, arg1 int, arg2 []int) (map[int]struct{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApproversIDMapMatchingTheListByTaskID", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[int]struct{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApproversIDMapMatchingTheListByTaskID indicates an expected call of GetApproversIDMapMatchingTheListByTaskID.
func (mr *MockTaskEventsDBRepoInterfaceMockRecorder) GetApproversIDMapMatchingTheListByTaskID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApproversIDMapMatchingTheListByTaskID", reflect.TypeOf((*MockTaskEventsDBRepoInterface)(nil).GetApproversIDMapMatchingTheListByTaskID), arg0, arg1, arg2)
}

// GetTaskEventTypeByName mocks base method.
func (m *MockTaskEventsDBRepoInterface) GetTaskEventTypeByName(arg0 context.Context, arg1 entity.KafkaTypes) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskEventTypeByName", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskEventTypeByName indicates an expected call of GetTaskEventTypeByName.
func (mr *MockTaskEventsDBRepoInterfaceMockRecorder) GetTaskEventTypeByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskEventTypeByName", reflect.TypeOf((*MockTaskEventsDBRepoInterface)(nil).GetTaskEventTypeByName), arg0, arg1)
}

// InsertDBTaskEvents mocks base method.
func (m *MockTaskEventsDBRepoInterface) InsertDBTaskEvents(arg0 context.Context, arg1, arg2 int, arg3 entity.KafkaTypes) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertDBTaskEvents", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertDBTaskEvents indicates an expected call of InsertDBTaskEvents.
func (mr *MockTaskEventsDBRepoInterfaceMockRecorder) InsertDBTaskEvents(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertDBTaskEvents", reflect.TypeOf((*MockTaskEventsDBRepoInterface)(nil).InsertDBTaskEvents), arg0, arg1, arg2, arg3)
}

// MockUserDBRepoInterface is a mock of UserDBRepoInterface interface.
type MockUserDBRepoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserDBRepoInterfaceMockRecorder
}

// MockUserDBRepoInterfaceMockRecorder is the mock recorder for MockUserDBRepoInterface.
type MockUserDBRepoInterfaceMockRecorder struct {
	mock *MockUserDBRepoInterface
}

// NewMockUserDBRepoInterface creates a new mock instance.
func NewMockUserDBRepoInterface(ctrl *gomock.Controller) *MockUserDBRepoInterface {
	mock := &MockUserDBRepoInterface{ctrl: ctrl}
	mock.recorder = &MockUserDBRepoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserDBRepoInterface) EXPECT() *MockUserDBRepoInterfaceMockRecorder {
	return m.recorder
}

// CreateDBUser mocks base method.
func (m *MockUserDBRepoInterface) CreateDBUser(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDBUser", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDBUser indicates an expected call of CreateDBUser.
func (mr *MockUserDBRepoInterfaceMockRecorder) CreateDBUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDBUser", reflect.TypeOf((*MockUserDBRepoInterface)(nil).CreateDBUser), arg0, arg1)
}

// DeleteDBUser mocks base method.
func (m *MockUserDBRepoInterface) DeleteDBUser(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDBUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDBUser indicates an expected call of DeleteDBUser.
func (mr *MockUserDBRepoInterfaceMockRecorder) DeleteDBUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDBUser", reflect.TypeOf((*MockUserDBRepoInterface)(nil).DeleteDBUser), arg0, arg1)
}

// GetDBUserByEmail mocks base method.
func (m *MockUserDBRepoInterface) GetDBUserByEmail(arg0 context.Context, arg1 string) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDBUserByEmail", arg0, arg1)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDBUserByEmail indicates an expected call of GetDBUserByEmail.
func (mr *MockUserDBRepoInterfaceMockRecorder) GetDBUserByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDBUserByEmail", reflect.TypeOf((*MockUserDBRepoInterface)(nil).GetDBUserByEmail), arg0, arg1)
}

// GetDBUserByID mocks base method.
func (m *MockUserDBRepoInterface) GetDBUserByID(arg0 context.Context, arg1 int) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDBUserByID", arg0, arg1)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDBUserByID indicates an expected call of GetDBUserByID.
func (mr *MockUserDBRepoInterfaceMockRecorder) GetDBUserByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDBUserByID", reflect.TypeOf((*MockUserDBRepoInterface)(nil).GetDBUserByID), arg0, arg1)
}

// ListDBUser mocks base method.
func (m *MockUserDBRepoInterface) ListDBUser(arg0 context.Context) ([]entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDBUser", arg0)
	ret0, _ := ret[0].([]entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDBUser indicates an expected call of ListDBUser.
func (mr *MockUserDBRepoInterfaceMockRecorder) ListDBUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDBUser", reflect.TypeOf((*MockUserDBRepoInterface)(nil).ListDBUser), arg0)
}

// UpdateDBUser mocks base method.
func (m *MockUserDBRepoInterface) UpdateDBUser(arg0 context.Context, arg1 entity.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDBUser", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDBUser indicates an expected call of UpdateDBUser.
func (mr *MockUserDBRepoInterfaceMockRecorder) UpdateDBUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDBUser", reflect.TypeOf((*MockUserDBRepoInterface)(nil).UpdateDBUser), arg0, arg1)
}
