// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.13.0
// source: proto/auth.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthApiClient is the client API for AuthApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthApiClient interface {
	Authenticate(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	UpdateTokens(ctx context.Context, in *RefreshTokenCredits, opts ...grpc.CallOption) (*UserCredits, error)
}

type authApiClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthApiClient(cc grpc.ClientConnInterface) AuthApiClient {
	return &authApiClient{cc}
}

func (c *authApiClient) Authenticate(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, "/main.AuthApi/Authenticate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authApiClient) UpdateTokens(ctx context.Context, in *RefreshTokenCredits, opts ...grpc.CallOption) (*UserCredits, error) {
	out := new(UserCredits)
	err := c.cc.Invoke(ctx, "/main.AuthApi/UpdateTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthApiServer is the server API for AuthApi service.
// All implementations must embed UnimplementedAuthApiServer
// for forward compatibility
type AuthApiServer interface {
	Authenticate(context.Context, *AuthRequest) (*AuthResponse, error)
	UpdateTokens(context.Context, *RefreshTokenCredits) (*UserCredits, error)
	mustEmbedUnimplementedAuthApiServer()
}

// UnimplementedAuthApiServer must be embedded to have forward compatible implementations.
type UnimplementedAuthApiServer struct {
}

func (UnimplementedAuthApiServer) Authenticate(context.Context, *AuthRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedAuthApiServer) UpdateTokens(context.Context, *RefreshTokenCredits) (*UserCredits, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTokens not implemented")
}
func (UnimplementedAuthApiServer) mustEmbedUnimplementedAuthApiServer() {}

// UnsafeAuthApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthApiServer will
// result in compilation errors.
type UnsafeAuthApiServer interface {
	mustEmbedUnimplementedAuthApiServer()
}

func RegisterAuthApiServer(s grpc.ServiceRegistrar, srv AuthApiServer) {
	s.RegisterService(&AuthApi_ServiceDesc, srv)
}

func _AuthApi_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthApiServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.AuthApi/Authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthApiServer).Authenticate(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthApi_UpdateTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenCredits)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthApiServer).UpdateTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.AuthApi/UpdateTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthApiServer).UpdateTokens(ctx, req.(*RefreshTokenCredits))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthApi_ServiceDesc is the grpc.ServiceDesc for AuthApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.AuthApi",
	HandlerType: (*AuthApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authenticate",
			Handler:    _AuthApi_Authenticate_Handler,
		},
		{
			MethodName: "UpdateTokens",
			Handler:    _AuthApi_UpdateTokens_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/auth.proto",
}
